import fs from 'fs';
import { fileURLToPath, URL } from 'url';

import { defineConfig } from 'vite';

import banner from 'vite-plugin-banner';
import { checker } from 'vite-plugin-checker';

const pkg = require('./package.json');
const build = new Date().toISOString();

// Export vite config
export default defineConfig(async ({ mode, command }) => {
  // Hook production build.
  /** @type {UserConfig} https://vitejs.dev/config/ */
  const config = {
    // https://vitejs.dev/config/#base
    base: './',
    plugins: [
      // vite-plugin-checker
      // https://github.com/fi3ework/vite-plugin-checker
      checker({
        typescript: false,
        vueTsc: false,
        // eslint: { lintCommand: `eslint` }, // for example, lint .ts & .tsx
      }),
      // vite-plugin-banner
      // https://github.com/chengpeiquan/vite-plugin-banner
      banner(`/**
  * ${pkg.name}
  *
  * @description ${pkg.description}
  * @author iyama, Logue
  * @license ${pkg.license}
  * @version ${pkg.version}
  * @see {@link ${pkg.homepage}}
  */
  `),
    ],
    publicDir: mode === 'docs',
    // https://vitejs.dev/config/#server-options
    server: {
      fs: {
        // Allow serving files from one level up to the project root
        allow: ['..'],
      },
      cors: false,
    },
    resolve: {
      // https://vitejs.dev/config/shared-options.html#resolve-alias
      alias: {
        '@': fileURLToPath(new URL('./src', import.meta.url)),
        '~': fileURLToPath(new URL('./node_modules', import.meta.url)),
      },
      extensions: ['.js'],
    },
    // Build Options
    // https://vitejs.dev/config/#build-options
    build: {
      // Build Target
      // https://vitejs.dev/config/build-options.html#build-target
      target: 'esnext',
      outDir: mode === 'docs' ? 'docs' : 'dist',
      // Minify option
      // https://vitejs.dev/config/build-options.html#build-minify
      minify: true,
      // https://vitejs.dev/config/build-options.html#build-lib
      lib:
        mode === 'docs'
          ? undefined
          : {
              entry: fileURLToPath(new URL('./src/index.js', import.meta.url)),
              name: 'SMF',
              formats: ['es', 'umd', 'iife'],
              fileName: format => `smfplayer.${format}.js`,
            },
    },
    esbuild: {
      drop: command === 'serve' ? [] : ['console'],
    },
  };
  // Write meta data.

  fs.writeFileSync(
    fileURLToPath(new URL('./src/meta.js', import.meta.url)),
    `// This file is auto-generated by the build system.
const meta = {
  version: '${pkg.version}',
  date: '${build}',
};
export default meta;
`
  );

  return config;
});
